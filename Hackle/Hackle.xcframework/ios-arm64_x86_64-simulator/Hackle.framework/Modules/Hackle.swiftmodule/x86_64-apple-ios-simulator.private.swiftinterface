// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Hackle
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import MobileCoreServices
import SQLite3
import Swift
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
@objc @_hasMissingDesignatedInitializers public class HackleConfig : ObjectiveC.NSObject {
  @objc public static let DEFAULT: Hackle.HackleConfig
  @objc public static func builder() -> Hackle.HackleConfigBuilder
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HackleConfigBuilder : ObjectiveC.NSObject {
  @objc public func sdkUrl(_ sdkUrl: Foundation.URL) -> Hackle.HackleConfigBuilder
  @objc public func eventUrl(_ eventUrl: Foundation.URL) -> Hackle.HackleConfigBuilder
  @objc public func monitoringUrl(_ monitoringUrl: Foundation.URL) -> Hackle.HackleConfigBuilder
  @objc public func sessionTimeoutIntervalSeconds(_ sessionTimeoutInterval: Foundation.TimeInterval) -> Hackle.HackleConfigBuilder
  @objc public func pollingIntervalSeconds(_ pollingInterval: Foundation.TimeInterval) -> Hackle.HackleConfigBuilder
  @objc public func eventFlushIntervalSeconds(_ eventFlushInterval: Foundation.TimeInterval) -> Hackle.HackleConfigBuilder
  @objc public func eventFlushThreshold(_ eventFlushThreshold: Swift.Int) -> Hackle.HackleConfigBuilder
  @objc public func exposureEventDedupIntervalSeconds(_ exposureEventDedupInterval: Foundation.TimeInterval) -> Hackle.HackleConfigBuilder
  @objc public func add(_ key: Swift.String, _ value: Swift.String) -> Hackle.HackleConfigBuilder
  @objc public func build() -> Hackle.HackleConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HackleRemoteConfig : Hackle.Config {
  @objc func getString(forKey: Swift.String, defaultValue: Swift.String) -> Swift.String
  @objc func getInt(forKey: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc func getDouble(forKey: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc func getBool(forKey: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class Event : ObjectiveC.NSObject {
  @objc public static func builder(_ key: Swift.String) -> Hackle.HackleEventBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HackleEventBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc public func value(_ value: Swift.Double) -> Hackle.HackleEventBuilder
  @discardableResult
  @objc public func property(_ key: Swift.String, _ value: Any?) -> Hackle.HackleEventBuilder
  @discardableResult
  @objc public func properties(_ properties: [Swift.String : Any]) -> Hackle.HackleEventBuilder
  @objc public func build() -> Hackle.Event
  @objc deinit
}
@objc public protocol Config {
  @objc func getString(forKey: Swift.String, defaultValue: Swift.String) -> Swift.String
  @objc func getInt(forKey: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc func getDouble(forKey: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc func getBool(forKey: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc final public class Decision : ObjectiveC.NSObject, Hackle.ParameterConfig {
  @objc final public let experiment: Hackle.HackleExperiment?
  @objc final public let variation: Swift.String
  @objc final public let reason: Swift.String
  @objc final public let config: Hackle.ParameterConfig
  @objc final public let parameters: [Swift.String : Any]
  @objc final public func getString(forKey: Swift.String, defaultValue: Swift.String) -> Swift.String
  @objc final public func getInt(forKey: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc final public func getDouble(forKey: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc final public func getBool(forKey: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class FeatureFlagDecision : ObjectiveC.NSObject, Hackle.ParameterConfig {
  @objc final public let featureFlag: Hackle.HackleExperiment?
  @objc final public let isOn: Swift.Bool
  @objc final public let reason: Swift.String
  @objc final public let config: Hackle.ParameterConfig
  @objc final public let parameters: [Swift.String : Any]
  @objc final public func getString(forKey: Swift.String, defaultValue: Swift.String) -> Swift.String
  @objc final public func getInt(forKey: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc final public func getDouble(forKey: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc final public func getBool(forKey: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  @objc deinit
}
@objc public protocol ParameterConfig : Hackle.Config {
  @objc var parameters: [Swift.String : Any] { get }
  @objc func getString(forKey: Swift.String, defaultValue: Swift.String) -> Swift.String
  @objc func getInt(forKey: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc func getDouble(forKey: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc func getBool(forKey: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc final public class HackleApp : ObjectiveC.NSObject {
  @objc final public var deviceId: Swift.String {
    @objc get
  }
  @objc final public var sessionId: Swift.String {
    @objc get
  }
  @objc final public var user: Hackle.User {
    @objc get
  }
  @objc final public func showUserExplorer()
  @objc final public func setUser(user: Hackle.User)
  @objc final public func setUser(user: Hackle.User, completion: @escaping () -> ())
  @objc final public func setUserId(userId: Swift.String?)
  @objc final public func setUserId(userId: Swift.String?, completion: @escaping () -> ())
  @objc final public func setDeviceId(deviceId: Swift.String)
  @objc final public func setDeviceId(deviceId: Swift.String, completion: @escaping () -> ())
  @objc final public func setUserProperty(key: Swift.String, value: Any?)
  @objc final public func setUserProperty(key: Swift.String, value: Any?, completion: @escaping () -> ())
  @objc final public func updateUserProperties(operations: Hackle.PropertyOperations)
  @objc final public func updateUserProperties(operations: Hackle.PropertyOperations, completion: @escaping () -> ())
  @objc final public func resetUser()
  @objc final public func resetUser(completion: @escaping () -> ())
  @objc final public func variation(experimentKey: Swift.Int, defaultVariation: Swift.String = "A") -> Swift.String
  @objc final public func variationDetail(experimentKey: Swift.Int, defaultVariation: Swift.String = "A") -> Hackle.Decision
  @objc final public func allVariationDetails() -> [Swift.Int : Hackle.Decision]
  @objc final public func isFeatureOn(featureKey: Swift.Int) -> Swift.Bool
  @objc final public func featureFlagDetail(featureKey: Swift.Int) -> Hackle.FeatureFlagDecision
  @objc final public func track(eventKey: Swift.String)
  @objc final public func track(event: Hackle.Event)
  @objc final public func remoteConfig() -> Hackle.HackleRemoteConfig
  @objc final public func setWebViewBridge(_ webView: WebKit.WKWebView, _ uiDelegate: WebKit.WKUIDelegate? = nil)
  @objc final public func setPushToken(_ deviceToken: Foundation.Data)
  @objc final public func fetch(_ completion: @escaping () -> ())
  @available(*, deprecated, message: "Use variation(experimentKey) with setUser(user) instead.")
  @objc final public func variation(experimentKey: Swift.Int, userId: Swift.String, defaultVariation: Swift.String = "A") -> Swift.String
  @available(*, deprecated, message: "Use variation(experimentKey) with setUser(user) instead.")
  @objc final public func variation(experimentKey: Swift.Int, user: Hackle.User, defaultVariation: Swift.String = "A") -> Swift.String
  @available(*, deprecated, message: "Use variationDetail(experimentKey) with setUser(user) instead,")
  @objc final public func variationDetail(experimentKey: Swift.Int, userId: Swift.String, defaultVariation: Swift.String = "A") -> Hackle.Decision
  @available(*, deprecated, message: "Use variationDetail(experimentKey) with setUser(user) instead,")
  @objc final public func variationDetail(experimentKey: Swift.Int, user: Hackle.User, defaultVariation: Swift.String = "A") -> Hackle.Decision
  @available(*, deprecated, message: "Use allVariationDetails() with setUser(user) instead.")
  @objc final public func allVariationDetails(user: Hackle.User) -> [Swift.Int : Hackle.Decision]
  @available(*, deprecated, message: "Use isFeatureOn(featureKey) with setUser(user) instead.")
  @objc final public func isFeatureOn(featureKey: Swift.Int, userId: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Use isFeatureOn(featureKey) with setUser(user) instead.")
  @objc final public func isFeatureOn(featureKey: Swift.Int, user: Hackle.User) -> Swift.Bool
  @available(*, deprecated, message: "Use featureFlagDetail(featureKey) with setUser(user) instead.")
  @objc final public func featureFlagDetail(featureKey: Swift.Int, userId: Swift.String) -> Hackle.FeatureFlagDecision
  @available(*, deprecated, message: "Use featureFlagDetail(featureKey) with setUser(user) instead.")
  @objc final public func featureFlagDetail(featureKey: Swift.Int, user: Hackle.User) -> Hackle.FeatureFlagDecision
  @available(*, deprecated, message: "Use track(eventKey) with setUser(user) instead.")
  @objc final public func track(eventKey: Swift.String, userId: Swift.String)
  @available(*, deprecated, message: "Use track(eventKey) with setUser(user) instead.")
  @objc final public func track(eventKey: Swift.String, user: Hackle.User)
  @available(*, deprecated, message: "Use track(event) with setUser(user) instead.")
  @objc final public func track(event: Hackle.Event, userId: Swift.String)
  @available(*, deprecated, message: "Use track(event) with setUser(user) instead.")
  @objc final public func track(event: Hackle.Event, user: Hackle.User)
  @available(*, deprecated, message: "Use remoteConfig() with setUser(user) instead.")
  @objc final public func remoteConfig(user: Hackle.User) -> Hackle.HackleRemoteConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class HackleExperiment : ObjectiveC.NSObject {
  @objc final public let key: Swift.Int64
  @objc final public let version: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class User : ObjectiveC.NSObject {
  @objc final public let id: Swift.String?
  @objc final public let userId: Swift.String?
  @objc final public let deviceId: Swift.String?
  @objc final public let identifiers: [Swift.String : Swift.String]
  @objc final public let properties: [Swift.String : Any]
  @objc public static func builder() -> Hackle.HackleUserBuilder
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func toBuilder() -> Hackle.HackleUserBuilder
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HackleUserBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @discardableResult
  @objc public func id(_ id: Swift.String?) -> Hackle.HackleUserBuilder
  @discardableResult
  @objc public func userId(_ userId: Swift.String?) -> Hackle.HackleUserBuilder
  @discardableResult
  @objc public func deviceId(_ deviceId: Swift.String?) -> Hackle.HackleUserBuilder
  @discardableResult
  @objc public func identifier(_ type: Swift.String, _ value: Swift.String) -> Hackle.HackleUserBuilder
  @discardableResult
  @objc public func identifiers(_ identifiers: [Swift.String : Swift.String]) -> Hackle.HackleUserBuilder
  @discardableResult
  @objc public func property(_ key: Swift.String, _ value: Any?) -> Hackle.HackleUserBuilder
  @discardableResult
  @objc public func properties(_ properties: [Swift.String : Any]) -> Hackle.HackleUserBuilder
  @objc public func build() -> Hackle.User
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PropertyOperations : ObjectiveC.NSObject {
  @objc public static func builder() -> Hackle.PropertyOperationsBuilder
  @objc public static func clearAll() -> Hackle.PropertyOperations
  @objc public static func empty() -> Hackle.PropertyOperations
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PropertyOperationsBuilder : ObjectiveC.NSObject {
  @discardableResult
  @objc public func set(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func setOnce(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func unset(_ key: Swift.String) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func increment(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func append(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func appendOnce(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func prepend(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func prependOnce(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func remove(_ key: Swift.String, _ value: Any?) -> Hackle.PropertyOperationsBuilder
  @discardableResult
  @objc public func clearAll() -> Hackle.PropertyOperationsBuilder
  @objc public func build() -> Hackle.PropertyOperations
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HackleInternalResources {
  public static let bundle: Foundation.Bundle
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Hackle : ObjectiveC.NSObject {
  @objc public static func initialize(sdkKey: Swift.String, config: Hackle.HackleConfig = HackleConfig.DEFAULT)
  @objc public static func initialize(sdkKey: Swift.String, config: Hackle.HackleConfig = HackleConfig.DEFAULT, completion: @escaping () -> ())
  @objc public static func initialize(sdkKey: Swift.String, user: Hackle.User?, config: Hackle.HackleConfig = HackleConfig.DEFAULT)
  @objc public static func initialize(sdkKey: Swift.String, user: Hackle.User?, config: Hackle.HackleConfig = HackleConfig.DEFAULT, completion: @escaping () -> ())
  @objc public static func app() -> Hackle.HackleApp?
  @objc override dynamic public init()
  @objc deinit
}
extension Hackle.Hackle {
  @objc public static func user(id: Swift.String? = nil, userId: Swift.String? = nil, deviceId: Swift.String? = nil, identifiers: [Swift.String : Swift.String]? = nil, properties: [Swift.String : Any]? = nil) -> Hackle.User
  @objc public static func event(key: Swift.String, properties: [Swift.String : Any]? = nil) -> Hackle.Event
  @objc public static func event(key: Swift.String, value: Swift.Double, properties: [Swift.String : Any]? = nil) -> Hackle.Event
}
extension Hackle.Hackle {
  @objc public static func userNotificationCenter(center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void) -> Swift.Bool
  @objc public static func userNotificationCenter(center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void) -> Swift.Bool
}
extension Hackle.Hackle {
  @objc public static func populateNotificationContent(request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void) -> Swift.Bool
}
