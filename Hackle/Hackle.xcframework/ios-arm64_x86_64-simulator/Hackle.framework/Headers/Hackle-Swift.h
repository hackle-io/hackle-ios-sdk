#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef HACKLE_SWIFT_H
#define HACKLE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Hackle",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_PROTOCOL("_TtP6Hackle6Config_")
@protocol Config
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6Hackle15ParameterConfig_")
@protocol ParameterConfig <Config>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
@end

@class HackleExperiment;

SWIFT_CLASS("_TtC6Hackle8Decision")
@interface Decision : NSObject <ParameterConfig>
@property (nonatomic, readonly, strong) HackleExperiment * _Nullable experiment;
@property (nonatomic, readonly, copy) NSString * _Nonnull variation;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly, strong) id <ParameterConfig> _Nonnull config;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class HackleEventBuilder;

SWIFT_CLASS("_TtC6Hackle5Event")
@interface Event : NSObject
+ (HackleEventBuilder * _Nonnull)builder:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6Hackle19FeatureFlagDecision")
@interface FeatureFlagDecision : NSObject <ParameterConfig>
@property (nonatomic, readonly, strong) HackleExperiment * _Nullable featureFlag;
@property (nonatomic, readonly) BOOL isOn;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly, strong) id <ParameterConfig> _Nonnull config;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class HackleConfig;
@class User;
@class HackleApp;

SWIFT_CLASS("_TtC6Hackle6Hackle")
@interface Hackle : NSObject
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey config:(HackleConfig * _Nonnull)config;
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey config:(HackleConfig * _Nonnull)config completion:(void (^ _Nonnull)(void))completion;
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey user:(User * _Nullable)user config:(HackleConfig * _Nonnull)config;
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey user:(User * _Nullable)user config:(HackleConfig * _Nonnull)config completion:(void (^ _Nonnull)(void))completion;
/// Returns a singleton instance of <code>HackleApp</code>
///
/// returns:
/// The HackleApp instance or <code>nil</code> if not initialized
+ (HackleApp * _Nullable)app SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UNNotificationRequest;
@class UNNotificationContent;

@interface Hackle (SWIFT_EXTENSION(Hackle))
+ (BOOL)populateNotificationContentWithRequest:(UNNotificationRequest * _Nonnull)request withContentHandler:(void (^ _Nonnull)(UNNotificationContent * _Nonnull))contentHandler SWIFT_WARN_UNUSED_RESULT;
@end

@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

@interface Hackle (SWIFT_EXTENSION(Hackle))
+ (BOOL)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center willPresent:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center didReceive:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface Hackle (SWIFT_EXTENSION(Hackle))
+ (User * _Nonnull)userWithId:(NSString * _Nullable)id userId:(NSString * _Nullable)userId deviceId:(NSString * _Nullable)deviceId identifiers:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
+ (Event * _Nonnull)eventWithKey:(NSString * _Nonnull)key properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
+ (Event * _Nonnull)eventWithKey:(NSString * _Nonnull)key value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
@end

@class PropertyOperations;
@protocol HackleRemoteConfig;
@class WKWebView;
@protocol WKUIDelegate;
@class NSData;

/// Entry point of Hackle Sdk.
SWIFT_CLASS("_TtC6Hackle9HackleApp")
@interface HackleApp : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, strong) User * _Nonnull user;
- (void)showUserExplorer;
- (void)setUserWithUser:(User * _Nonnull)user;
- (void)setUserWithUser:(User * _Nonnull)user completion:(void (^ _Nonnull)(void))completion;
- (void)setUserIdWithUserId:(NSString * _Nullable)userId;
- (void)setUserIdWithUserId:(NSString * _Nullable)userId completion:(void (^ _Nonnull)(void))completion;
- (void)setDeviceIdWithDeviceId:(NSString * _Nonnull)deviceId;
- (void)setDeviceIdWithDeviceId:(NSString * _Nonnull)deviceId completion:(void (^ _Nonnull)(void))completion;
- (void)setUserPropertyWithKey:(NSString * _Nonnull)key value:(id _Nullable)value;
- (void)setUserPropertyWithKey:(NSString * _Nonnull)key value:(id _Nullable)value completion:(void (^ _Nonnull)(void))completion;
- (void)updateUserPropertiesWithOperations:(PropertyOperations * _Nonnull)operations;
- (void)updateUserPropertiesWithOperations:(PropertyOperations * _Nonnull)operations completion:(void (^ _Nonnull)(void))completion;
- (void)resetUser;
- (void)resetUserWithCompletion:(void (^ _Nonnull)(void))completion;
- (NSString * _Nonnull)variationWithExperimentKey:(NSInteger)experimentKey defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT;
- (Decision * _Nonnull)variationDetailWithExperimentKey:(NSInteger)experimentKey defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSNumber *, Decision *> * _Nonnull)allVariationDetails SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFeatureOnFeatureKey:(NSInteger)featureKey SWIFT_WARN_UNUSED_RESULT;
- (FeatureFlagDecision * _Nonnull)featureFlagDetailWithFeatureKey:(NSInteger)featureKey SWIFT_WARN_UNUSED_RESULT;
- (void)trackWithEventKey:(NSString * _Nonnull)eventKey;
- (void)trackWithEvent:(Event * _Nonnull)event;
- (id <HackleRemoteConfig> _Nonnull)remoteConfig SWIFT_WARN_UNUSED_RESULT;
- (void)setWebViewBridge:(WKWebView * _Nonnull)webView :(id <WKUIDelegate> _Nullable)uiDelegate;
- (void)setPushToken:(NSData * _Nonnull)deviceToken;
- (void)fetch:(void (^ _Nonnull)(void))completion;
- (NSString * _Nonnull)variationWithExperimentKey:(NSInteger)experimentKey userId:(NSString * _Nonnull)userId defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variation(experimentKey) with setUser(user) instead.");
- (NSString * _Nonnull)variationWithExperimentKey:(NSInteger)experimentKey user:(User * _Nonnull)user defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variation(experimentKey) with setUser(user) instead.");
- (Decision * _Nonnull)variationDetailWithExperimentKey:(NSInteger)experimentKey userId:(NSString * _Nonnull)userId defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variationDetail(experimentKey) with setUser(user) instead,");
- (Decision * _Nonnull)variationDetailWithExperimentKey:(NSInteger)experimentKey user:(User * _Nonnull)user defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variationDetail(experimentKey) with setUser(user) instead,");
- (NSDictionary<NSNumber *, Decision *> * _Nonnull)allVariationDetailsWithUser:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use allVariationDetails() with setUser(user) instead.");
- (BOOL)isFeatureOnFeatureKey:(NSInteger)featureKey userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use isFeatureOn(featureKey) with setUser(user) instead.");
- (BOOL)isFeatureOnFeatureKey:(NSInteger)featureKey user:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use isFeatureOn(featureKey) with setUser(user) instead.");
- (FeatureFlagDecision * _Nonnull)featureFlagDetailWithFeatureKey:(NSInteger)featureKey userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use featureFlagDetail(featureKey) with setUser(user) instead.");
- (FeatureFlagDecision * _Nonnull)featureFlagDetailWithFeatureKey:(NSInteger)featureKey user:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use featureFlagDetail(featureKey) with setUser(user) instead.");
- (void)trackWithEventKey:(NSString * _Nonnull)eventKey userId:(NSString * _Nonnull)userId SWIFT_DEPRECATED_MSG("Use track(eventKey) with setUser(user) instead.");
- (void)trackWithEventKey:(NSString * _Nonnull)eventKey user:(User * _Nonnull)user SWIFT_DEPRECATED_MSG("Use track(eventKey) with setUser(user) instead.");
- (void)trackWithEvent:(Event * _Nonnull)event userId:(NSString * _Nonnull)userId SWIFT_DEPRECATED_MSG("Use track(event) with setUser(user) instead.");
- (void)trackWithEvent:(Event * _Nonnull)event user:(User * _Nonnull)user SWIFT_DEPRECATED_MSG("Use track(event) with setUser(user) instead.");
- (id <HackleRemoteConfig> _Nonnull)remoteConfigWithUser:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use remoteConfig() with setUser(user) instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class HackleConfigBuilder;

SWIFT_CLASS("_TtC6Hackle12HackleConfig")
@interface HackleConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HackleConfig * _Nonnull DEFAULT;)
+ (HackleConfig * _Nonnull)DEFAULT SWIFT_WARN_UNUSED_RESULT;
+ (HackleConfigBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_CLASS("_TtC6Hackle19HackleConfigBuilder")
@interface HackleConfigBuilder : NSObject
- (HackleConfigBuilder * _Nonnull)sdkUrl:(NSURL * _Nonnull)sdkUrl SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)eventUrl:(NSURL * _Nonnull)eventUrl SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)monitoringUrl:(NSURL * _Nonnull)monitoringUrl SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)sessionTimeoutIntervalSeconds:(NSTimeInterval)sessionTimeoutInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)pollingIntervalSeconds:(NSTimeInterval)pollingInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)eventFlushIntervalSeconds:(NSTimeInterval)eventFlushInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)eventFlushThreshold:(NSInteger)eventFlushThreshold SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)exposureEventDedupIntervalSeconds:(NSTimeInterval)exposureEventDedupInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)add:(NSString * _Nonnull)key :(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (HackleConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Hackle18HackleEventBuilder")
@interface HackleEventBuilder : NSObject
- (HackleEventBuilder * _Nonnull)value:(double)value;
- (HackleEventBuilder * _Nonnull)property:(NSString * _Nonnull)key :(id _Nullable)value;
- (HackleEventBuilder * _Nonnull)properties:(NSDictionary<NSString *, id> * _Nonnull)properties;
- (Event * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Hackle16HackleExperiment")
@interface HackleExperiment : NSObject
@property (nonatomic, readonly) int64_t key;
@property (nonatomic, readonly) NSInteger version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6Hackle18HackleRemoteConfig_")
@protocol HackleRemoteConfig <Config>
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Hackle17HackleUserBuilder")
@interface HackleUserBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (HackleUserBuilder * _Nonnull)id:(NSString * _Nullable)id;
- (HackleUserBuilder * _Nonnull)userId:(NSString * _Nullable)userId;
- (HackleUserBuilder * _Nonnull)deviceId:(NSString * _Nullable)deviceId;
- (HackleUserBuilder * _Nonnull)identifier:(NSString * _Nonnull)type :(NSString * _Nonnull)value;
- (HackleUserBuilder * _Nonnull)identifiers:(NSDictionary<NSString *, NSString *> * _Nonnull)identifiers;
- (HackleUserBuilder * _Nonnull)property:(NSString * _Nonnull)key :(id _Nullable)value;
- (HackleUserBuilder * _Nonnull)properties:(NSDictionary<NSString *, id> * _Nonnull)properties;
- (User * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end




@class PropertyOperationsBuilder;

SWIFT_CLASS("_TtC6Hackle18PropertyOperations")
@interface PropertyOperations : NSObject
+ (PropertyOperationsBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
+ (PropertyOperations * _Nonnull)clearAll SWIFT_WARN_UNUSED_RESULT;
+ (PropertyOperations * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6Hackle25PropertyOperationsBuilder")
@interface PropertyOperationsBuilder : NSObject
- (PropertyOperationsBuilder * _Nonnull)set:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)setOnce:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)unset:(NSString * _Nonnull)key;
- (PropertyOperationsBuilder * _Nonnull)increment:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)append:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)appendOnce:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)prepend:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)prependOnce:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)remove:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)clearAll;
- (PropertyOperations * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









SWIFT_CLASS("_TtC6Hackle4User")
@interface User : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull identifiers;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull properties;
+ (HackleUserBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (HackleUserBuilder * _Nonnull)toBuilder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef HACKLE_SWIFT_H
#define HACKLE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Hackle",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_PROTOCOL("_TtP6Hackle6Config_")
@protocol Config
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6Hackle15ParameterConfig_")
@protocol ParameterConfig <Config>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
@end

@class HackleExperiment;

SWIFT_CLASS("_TtC6Hackle8Decision")
@interface Decision : NSObject <ParameterConfig>
@property (nonatomic, readonly, strong) HackleExperiment * _Nullable experiment;
@property (nonatomic, readonly, copy) NSString * _Nonnull variation;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly, strong) id <ParameterConfig> _Nonnull config;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class HackleEventBuilder;

SWIFT_CLASS("_TtC6Hackle5Event")
@interface Event : NSObject
+ (HackleEventBuilder * _Nonnull)builder:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6Hackle19FeatureFlagDecision")
@interface FeatureFlagDecision : NSObject <ParameterConfig>
@property (nonatomic, readonly, strong) HackleExperiment * _Nullable featureFlag;
@property (nonatomic, readonly) BOOL isOn;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly, strong) id <ParameterConfig> _Nonnull config;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class HackleConfig;
@class User;
@class HackleApp;

SWIFT_CLASS("_TtC6Hackle6Hackle")
@interface Hackle : NSObject
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey config:(HackleConfig * _Nonnull)config;
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey config:(HackleConfig * _Nonnull)config completion:(void (^ _Nonnull)(void))completion;
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey user:(User * _Nullable)user config:(HackleConfig * _Nonnull)config;
+ (void)initializeWithSdkKey:(NSString * _Nonnull)sdkKey user:(User * _Nullable)user config:(HackleConfig * _Nonnull)config completion:(void (^ _Nonnull)(void))completion;
/// Returns a singleton instance of <code>HackleApp</code>
///
/// returns:
/// The HackleApp instance or <code>nil</code> if not initialized
+ (HackleApp * _Nullable)app SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UNNotificationRequest;
@class UNNotificationContent;

@interface Hackle (SWIFT_EXTENSION(Hackle))
+ (BOOL)populateNotificationContentWithRequest:(UNNotificationRequest * _Nonnull)request withContentHandler:(void (^ _Nonnull)(UNNotificationContent * _Nonnull))contentHandler SWIFT_WARN_UNUSED_RESULT;
@end

@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

@interface Hackle (SWIFT_EXTENSION(Hackle))
+ (BOOL)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center willPresent:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)userNotificationCenterWithCenter:(UNUserNotificationCenter * _Nonnull)center didReceive:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface Hackle (SWIFT_EXTENSION(Hackle))
+ (User * _Nonnull)userWithId:(NSString * _Nullable)id userId:(NSString * _Nullable)userId deviceId:(NSString * _Nullable)deviceId identifiers:(NSDictionary<NSString *, NSString *> * _Nullable)identifiers properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
+ (Event * _Nonnull)eventWithKey:(NSString * _Nonnull)key properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
+ (Event * _Nonnull)eventWithKey:(NSString * _Nonnull)key value:(double)value properties:(NSDictionary<NSString *, id> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
@end

@class PropertyOperations;
@protocol HackleRemoteConfig;
@class WKWebView;
@protocol WKUIDelegate;
@class NSData;

/// Entry point of Hackle Sdk.
SWIFT_CLASS("_TtC6Hackle9HackleApp")
@interface HackleApp : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
@property (nonatomic, readonly, strong) User * _Nonnull user;
- (void)showUserExplorer;
- (void)setUserWithUser:(User * _Nonnull)user;
- (void)setUserWithUser:(User * _Nonnull)user completion:(void (^ _Nonnull)(void))completion;
- (void)setUserIdWithUserId:(NSString * _Nullable)userId;
- (void)setUserIdWithUserId:(NSString * _Nullable)userId completion:(void (^ _Nonnull)(void))completion;
- (void)setDeviceIdWithDeviceId:(NSString * _Nonnull)deviceId;
- (void)setDeviceIdWithDeviceId:(NSString * _Nonnull)deviceId completion:(void (^ _Nonnull)(void))completion;
- (void)setUserPropertyWithKey:(NSString * _Nonnull)key value:(id _Nullable)value;
- (void)setUserPropertyWithKey:(NSString * _Nonnull)key value:(id _Nullable)value completion:(void (^ _Nonnull)(void))completion;
- (void)updateUserPropertiesWithOperations:(PropertyOperations * _Nonnull)operations;
- (void)updateUserPropertiesWithOperations:(PropertyOperations * _Nonnull)operations completion:(void (^ _Nonnull)(void))completion;
- (void)resetUser;
- (void)resetUserWithCompletion:(void (^ _Nonnull)(void))completion;
- (NSString * _Nonnull)variationWithExperimentKey:(NSInteger)experimentKey defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT;
- (Decision * _Nonnull)variationDetailWithExperimentKey:(NSInteger)experimentKey defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSNumber *, Decision *> * _Nonnull)allVariationDetails SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFeatureOnFeatureKey:(NSInteger)featureKey SWIFT_WARN_UNUSED_RESULT;
- (FeatureFlagDecision * _Nonnull)featureFlagDetailWithFeatureKey:(NSInteger)featureKey SWIFT_WARN_UNUSED_RESULT;
- (void)trackWithEventKey:(NSString * _Nonnull)eventKey;
- (void)trackWithEvent:(Event * _Nonnull)event;
- (id <HackleRemoteConfig> _Nonnull)remoteConfig SWIFT_WARN_UNUSED_RESULT;
- (void)setWebViewBridge:(WKWebView * _Nonnull)webView :(id <WKUIDelegate> _Nullable)uiDelegate;
- (void)setPushToken:(NSData * _Nonnull)deviceToken;
- (void)fetch:(void (^ _Nonnull)(void))completion;
- (NSString * _Nonnull)variationWithExperimentKey:(NSInteger)experimentKey userId:(NSString * _Nonnull)userId defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variation(experimentKey) with setUser(user) instead.");
- (NSString * _Nonnull)variationWithExperimentKey:(NSInteger)experimentKey user:(User * _Nonnull)user defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variation(experimentKey) with setUser(user) instead.");
- (Decision * _Nonnull)variationDetailWithExperimentKey:(NSInteger)experimentKey userId:(NSString * _Nonnull)userId defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variationDetail(experimentKey) with setUser(user) instead,");
- (Decision * _Nonnull)variationDetailWithExperimentKey:(NSInteger)experimentKey user:(User * _Nonnull)user defaultVariation:(NSString * _Nonnull)defaultVariation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use variationDetail(experimentKey) with setUser(user) instead,");
- (NSDictionary<NSNumber *, Decision *> * _Nonnull)allVariationDetailsWithUser:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use allVariationDetails() with setUser(user) instead.");
- (BOOL)isFeatureOnFeatureKey:(NSInteger)featureKey userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use isFeatureOn(featureKey) with setUser(user) instead.");
- (BOOL)isFeatureOnFeatureKey:(NSInteger)featureKey user:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use isFeatureOn(featureKey) with setUser(user) instead.");
- (FeatureFlagDecision * _Nonnull)featureFlagDetailWithFeatureKey:(NSInteger)featureKey userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use featureFlagDetail(featureKey) with setUser(user) instead.");
- (FeatureFlagDecision * _Nonnull)featureFlagDetailWithFeatureKey:(NSInteger)featureKey user:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use featureFlagDetail(featureKey) with setUser(user) instead.");
- (void)trackWithEventKey:(NSString * _Nonnull)eventKey userId:(NSString * _Nonnull)userId SWIFT_DEPRECATED_MSG("Use track(eventKey) with setUser(user) instead.");
- (void)trackWithEventKey:(NSString * _Nonnull)eventKey user:(User * _Nonnull)user SWIFT_DEPRECATED_MSG("Use track(eventKey) with setUser(user) instead.");
- (void)trackWithEvent:(Event * _Nonnull)event userId:(NSString * _Nonnull)userId SWIFT_DEPRECATED_MSG("Use track(event) with setUser(user) instead.");
- (void)trackWithEvent:(Event * _Nonnull)event user:(User * _Nonnull)user SWIFT_DEPRECATED_MSG("Use track(event) with setUser(user) instead.");
- (id <HackleRemoteConfig> _Nonnull)remoteConfigWithUser:(User * _Nonnull)user SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use remoteConfig() with setUser(user) instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class HackleConfigBuilder;

SWIFT_CLASS("_TtC6Hackle12HackleConfig")
@interface HackleConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HackleConfig * _Nonnull DEFAULT;)
+ (HackleConfig * _Nonnull)DEFAULT SWIFT_WARN_UNUSED_RESULT;
+ (HackleConfigBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

SWIFT_CLASS("_TtC6Hackle19HackleConfigBuilder")
@interface HackleConfigBuilder : NSObject
- (HackleConfigBuilder * _Nonnull)sdkUrl:(NSURL * _Nonnull)sdkUrl SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)eventUrl:(NSURL * _Nonnull)eventUrl SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)monitoringUrl:(NSURL * _Nonnull)monitoringUrl SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)sessionTimeoutIntervalSeconds:(NSTimeInterval)sessionTimeoutInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)pollingIntervalSeconds:(NSTimeInterval)pollingInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)eventFlushIntervalSeconds:(NSTimeInterval)eventFlushInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)eventFlushThreshold:(NSInteger)eventFlushThreshold SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)exposureEventDedupIntervalSeconds:(NSTimeInterval)exposureEventDedupInterval SWIFT_WARN_UNUSED_RESULT;
- (HackleConfigBuilder * _Nonnull)add:(NSString * _Nonnull)key :(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (HackleConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Hackle18HackleEventBuilder")
@interface HackleEventBuilder : NSObject
- (HackleEventBuilder * _Nonnull)value:(double)value;
- (HackleEventBuilder * _Nonnull)property:(NSString * _Nonnull)key :(id _Nullable)value;
- (HackleEventBuilder * _Nonnull)properties:(NSDictionary<NSString *, id> * _Nonnull)properties;
- (Event * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Hackle16HackleExperiment")
@interface HackleExperiment : NSObject
@property (nonatomic, readonly) int64_t key;
@property (nonatomic, readonly) NSInteger version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6Hackle18HackleRemoteConfig_")
@protocol HackleRemoteConfig <Config>
- (NSString * _Nonnull)getStringForKey:(NSString * _Nonnull)forKey defaultValue:(NSString * _Nonnull)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getIntForKey:(NSString * _Nonnull)forKey defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (double)getDoubleForKey:(NSString * _Nonnull)forKey defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBoolForKey:(NSString * _Nonnull)forKey defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Hackle17HackleUserBuilder")
@interface HackleUserBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (HackleUserBuilder * _Nonnull)id:(NSString * _Nullable)id;
- (HackleUserBuilder * _Nonnull)userId:(NSString * _Nullable)userId;
- (HackleUserBuilder * _Nonnull)deviceId:(NSString * _Nullable)deviceId;
- (HackleUserBuilder * _Nonnull)identifier:(NSString * _Nonnull)type :(NSString * _Nonnull)value;
- (HackleUserBuilder * _Nonnull)identifiers:(NSDictionary<NSString *, NSString *> * _Nonnull)identifiers;
- (HackleUserBuilder * _Nonnull)property:(NSString * _Nonnull)key :(id _Nullable)value;
- (HackleUserBuilder * _Nonnull)properties:(NSDictionary<NSString *, id> * _Nonnull)properties;
- (User * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end




@class PropertyOperationsBuilder;

SWIFT_CLASS("_TtC6Hackle18PropertyOperations")
@interface PropertyOperations : NSObject
+ (PropertyOperationsBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
+ (PropertyOperations * _Nonnull)clearAll SWIFT_WARN_UNUSED_RESULT;
+ (PropertyOperations * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6Hackle25PropertyOperationsBuilder")
@interface PropertyOperationsBuilder : NSObject
- (PropertyOperationsBuilder * _Nonnull)set:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)setOnce:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)unset:(NSString * _Nonnull)key;
- (PropertyOperationsBuilder * _Nonnull)increment:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)append:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)appendOnce:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)prepend:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)prependOnce:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)remove:(NSString * _Nonnull)key :(id _Nullable)value;
- (PropertyOperationsBuilder * _Nonnull)clearAll;
- (PropertyOperations * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









SWIFT_CLASS("_TtC6Hackle4User")
@interface User : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull identifiers;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull properties;
+ (HackleUserBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (HackleUserBuilder * _Nonnull)toBuilder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
